[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "pre_commit_images"
description = "Image optimization and manipulation with hooks for pre-commit."
authors = [{ name = "Raphael Boidol", email = "pre-commit@boidol.dev" }]
urls = { "Respository" = "https://github.com/boidolr/pre-commit-images" }
license = { file = "LICENSE" }
readme = "README.md"
version = "1.8.8"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]

requires-python = ">=3.10,<3.14"
dependencies = ["pillow==11.2.1"]

[project.optional-dependencies]
avif = ["pillow-avif-plugin==1.5.2"]
svg = ["scour==0.38.2"]
dev = ["pre-commit", "ruff", "tox", "tox-uv"]
tests = ["pytest", "pytest-cov", "pytest-clarity", "pytest-ruff", "pytest-ty"]

[project.scripts]
optimize-avif = "pre_commit_images.optimize_avif:main"
optimize-jpg = "pre_commit_images.optimize_jpg:main"
optimize-png = "pre_commit_images.optimize_png:main"
optimize-svg = "pre_commit_images.optimize_svg:main"
optimize-webp = "pre_commit_images.optimize_webp:main"
resize = "pre_commit_images.resize:main"

[tool.setuptools]
packages = ["pre_commit_images"]

[tool.ruff]
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "F",    # Pyflakes
    "E",
    "W",    # Pycodestyle
    "UP",   # pyupgrade
    "FURB", # refurb
    "S",    # flake8-bandit
    "C4",   # flake8-comprehensions
    "G",    # flake8-logging-format
    "ANN",  # flake8-annotations
    # "ARG",        # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "PTH",    # flake8-use-pathlib
    "TID252", # flake8-tidy-imports (relative-imports)
    "PERF",   # Perflint
    "FLY",    # flynt
    "I",      # isort
    "RUF100", # Unneeded noqa
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = false

[tool.coverage.run]
core = "sysmon"

[tool.pytest.ini_options]
addopts = "--ruff --ty --cov pre_commit_images --cov-fail-under=80"
testpaths = "tests pre_commit_images"
filterwarnings = [
    "error",
    "ignore:sys.monitoring isn't available in this version:coverage.exceptions.CoverageWarning",
]

[tool.tox]
requires = ["tox>=4.19", "tox-uv>=1.19.1"]
envlist = ["py310", "py311", "py312", "py313", "pre-commit"]
isolated_build = true

[tool.tox.env_run_base]
description = "Run test under {base_python}"
commands = [["pytest", { replace = "posargs", default = [], extend = true }]]
extras = ["tests", "svg", "avif"]
runner = "uv-venv-lock-runner"
uv_sync_flags = ["--no-editable"]

[tool.tox.env.pre-commit]
description = "run commit hooks on code base"
skip_install = true
deps = ["pre-commit"]
commands = [["pre-commit", "run", "--all-files"]]
runner = "virtualenv"

[tool.tox.env.static]
commands = [["pytest", "--ignore", "tests"]]
